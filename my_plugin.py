# -*- coding: utf-8 -*-
"""
/***************************************************************************
 my_plugin
                                 A QGIS plugin
 example
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-11-15
        git sha              : $Format:%H$
        copyright            : (C) 2022 by aidash 
        email                : yaswanthi.otra@aidash.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication , QFileInfo
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from qgis.core import QgsProject
from qgis.utils import iface
import glob
from pathlib import Path
from osgeo import gdal
import os
#import subprocess
#from qgis.core import QgsRasterBandStats
#from socket import AF_INET
#import rasterio
#from rasterio.crs import CRS
#from rasterio.plot import show
#from rasterio.enums import Resampling
#from matplotlib import pyplot as plt
#from mpl_toolkits.axes_grid1 import make_axes_locatable
#import numpy as np
#from pprint import pprint
from osgeo import gdal
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from qgis.core import *
from qgis.gui import *



# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .my_plugin_dialog import my_pluginDialog
import os.path


class my_plugin:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'my_plugin_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&my_plugin')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('my_plugin', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/my_plugin/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'my_plugin'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&my_plugin'),
                action)
            self.iface.removeToolBarIcon(action)

#    def merging(self):

#    method - 1 - using gdal_merge (however encountering an error)

#        demlist = glob.glob("/Users/yaswanthi.otra/Desktop/images/dem[0-9][0-9].tiff")
#        print(demlist)
#        cmd = "gdal_merge.py -ps 0.5 -0.5 -o /Users/yaswanthi.otra/Desktop/output/merged.tiff"
#        f_path = "/Users/yaswanthi.otra/Desktop/output/merged.tiff"
#        f_path = "merged.tiff"
#        subprocess.call(cmd.split()+demlist)
#        print(cmd+ ",".join(demlist))
#        os.system(cmd+ ",".join(demlist))


#        fi = QFileInfo(f_path)
#        fname = fi.baseName()
#        layer = iface.addRasterLayer(f_path, fname)
#        print(layer)
#        print("output acheived")


    def  merging(self):
#
        # creatinga virtual raster




        # here merged.vrt is an xml file that tells us where each opf the images
        # is stored so as to access it better

        demlist = glob.glob("/Users/yaswanthi.otra/Desktop/images/dem[0-9][0-9].tiff")
        vrt = gdal.BuildVRT("/Users/yaswanthi.otra/Desktop/output/merged.vrt", demlist)
        print(demlist)
        gdal.Translate("/Users/yaswanthi.otra/Desktop/output/merged_m.tiff" , vrt , xRes = 0.5 , yRes = -0.5)
        vrt = None

        fi = QFileInfo("/Users/yaswanthi.otra/Desktop/output/merged_m.tiff")
        fname = fi.baseName()
        layer = iface.addRasterLayer("/Users/yaswanthi.otra/Desktop/output/merged_m.tiff", fname)




    def tiling (self , layer , fn):
        dem = gdal.Open(fn)

        print(type(dem))
        gt = dem.GetGeoTransform()
        print(gt)

        x_min = gt[0]
        y_max= gt[3]
        resolution  = gt[1]

        xlen = resolution * dem.RasterXSize
        ylen = resolution * dem.RasterYSize
        # print(xlen , ylen)
        div = 3

        xsize = xlen/div
        ysize = ylen/div

        xsteps = [ x_min + xsize* i for i in range(div+1)]
        ysteps = [ y_max - ysize* i for i in range(div+1)]

        print(xsteps)
        print(ysteps)

        for i in range(div):
            for j in range(div):
                x_min = xsteps[i]
                x_max = xsteps[i+1]
                y_max = ysteps[j]
                y_min = ysteps[j+1]

                print(x_min , x_max , y_min , y_max )

                path = "/Users/yaswanthi.otra/Desktop/images/dem"+str(i)+str(j)+".tiff"
                gdal.Warp("/Users/yaswanthi.otra/Desktop/images/dem"+str(i)+str(j)+".tiff" , dem , xRes = resolution , yRes = resolution ,
                    outputBounds = (x_min , y_min , x_max , y_max ) , dstNodata = 0)

                fi = QFileInfo(path)
                fname = fi.baseName()
                layer = iface.addRasterLayer(path, fname)
        self.merging()


    def tempFun(self):
         fn = '/Users/yaswanthi.otra/Documents/GitHub/raster_project/world.tif'

         fi = QFileInfo(fn)
         fname = fi.baseName()

         layer = iface.addRasterLayer(fn, fname)
         print(type(layer))
         self.tiling(layer , fn)


    def run(self):
         if self.first_start == True:
            self.first_start = False
            self.dlg = my_pluginDialog()
         layers = QgsProject.instance().layerTreeRoot().children()
         self.dlg.comboBox.clear()
         self.dlg.comboBox.addItems([layer.name() for layer in layers])
         self.dlg.show()
         result = self.dlg.exec_()
         if result:

             self.tempFun()



